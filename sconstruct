
# Set our required libraries
libraries 		= []
library_paths 	= ''
cppDefines 		= {}
cppFlags 		= ['-Wall']#, '-Werror']
cxxFlags 		= ['-std=c++11']

# define the attributes of the build environment shared between
# both the debug and release builds
common_env = Environment()
common_env.Append(LIBS 			= libraries)
common_env.Append(LIBPATH 		= library_paths)
common_env.Append(CPPDEFINES 	= cppDefines)
common_env.Append(CPPFLAGS 		= cppFlags)
common_env.Append(CXXFLAGS 		= cxxFlags)

# uncomment to force g++ for c code also--creates warnings but
# avoids need for extern "C"
# common_env['CC'] = 'g++'

# Our release build is derived from the common build environment...
release_env = common_env.Clone()
release_env.Append(CPPDEFINES=['RELEASE'])
release_env.VariantDir('build/release/src', 'src', duplicate=0)
release_env.VariantDir('build/release/test', 'test', duplicate=0)

# We define our debug build environment in a similar fashion...
debug_env = common_env.Clone()
debug_env.Append(CPPDEFINES=['DEBUG'])
debug_env.VariantDir('build/debug/src', 'src', duplicate=0)
debug_env.VariantDir('build/debug/test', 'test', duplicate=0)

# Now that all build environment have been defined, let's iterate over
# them and invoke the lower level SConscript files.
for mode, env in dict(release=release_env,
    	       	      debug=debug_env).items():
	modeDir = 'build/%s' % mode
	env.SConscript('%s/src/sconscript' % modeDir, {'env': env})
	env.SConscript('%s/test/sconscript' % modeDir, {'env': env})
